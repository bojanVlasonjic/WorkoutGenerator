package drools.rules

import rbs.wg.WorkoutGenerator.facts.WorkoutProcessing;
import rbs.wg.WorkoutGenerator.facts.WorkoutRequest;
import rbs.wg.WorkoutGenerator.model.ExerciseType;
import java.lang.Math;

rule "Strength workout chosen, set workout intensity accordingly"
    agenda-group "workout"
    when
        $woReq: WorkoutRequest(workoutType == ExerciseType.STRENGTH)
        $woPr: WorkoutProcessing(numOfExercises > 0)
    then
        System.out.println("----> Strength workout chosen, set workout intensity accordingly");
        modify($woPr) {
            setSets(3),
            setRestBetweenSets(90);
        }
end

rule "Conditioning workout, set workout intensity accordingly"
    agenda-group "workout"
    when
        $woReq: WorkoutRequest(workoutType == ExerciseType.CONDITIONING)
        $woPr: WorkoutProcessing(numOfExercises > 0)
    then
        System.out.println("----> Conditioning workout chosen, set workout intensity accordingly");
        modify($woPr) {
            setNumOfIntervals(8),
            setNumOfRounds(4),
            setRestBetweenRounds(120);
        }
end

rule "Combo workout chosen, set workout intensity accordingly"
    agenda-group "workout"
    no-loop true
    when
            $woReq: WorkoutRequest(workoutType == ExerciseType.COMBO)
            $woPr: WorkoutProcessing(numOfExercises > 0)
    then
        System.out.println("----> Combo workout chosen, set workout intensity accordingly");
        modify($woPr) {
            setNumOfExercises((int)(Math.round($woPr.getNumOfExercises()/2))),
            setSets(5),
            setRestBetweenSets(60),
            setNumOfIntervals(8),
            setRestBetweenRounds(120),
            setNumOfRounds(2);
        }
end


